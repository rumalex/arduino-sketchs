#include Wire.h 
#include "LiquidCrystal_I2C.h"
 
LiquidCrystal_I2C lcd(0x27,16,2);  // устанавливаем адрес 0x27, и дисплей 16 символов в 2 строки (16х2)
 
int interval = 0;
 
void setup()
{
  lcd.init();                     // инициализация LCD 
  lcd.backlight();                // включаем подсветку
  lcd.clear();                    // очистка дисплея
  lcd.setCursor(4, 0);            // устанавливаем курсор на 1 строку, 4 символ
  lcd.print("cxem.net");          // вывод надписи
  lcd.setCursor(1, 1);            // устанавливаем курсор на 2 строку, 1 символ
  lcd.print("count:");  
  lcd.setCursor(8, 1);            // устанавливаем курсор на 2 строку, 8 символ
  lcd.print(interval);
}
 
void loop()
{
  delay(500);
  interval++;
  lcd.setCursor(8, 1);
  lcd.print(interval);
}

Код я постарался хорошо прокомментировать, поэтому вопросов по его работе возникнуть не должно.

Serial LCD
Создание пользовательских символов

На экране можно выводить пользовательские символы, создавать их очень просто. Размер одного символа составляет 5 пикселей по горизонтали и 7 пикселей по вертикали. Для создания символа необходимо начертить табличку 5х7 и закрасить необходимые клетки. В них ставим 1, а в пустых 0. Затем формируем семь строк в двоичном формате. Например русская буква "П":

Свой символ на LCD

Первая строка полностью закрашена, т.е. в двоичном формате это 11111. Переводим в шестнадцатеричный формат и получаем 1F. И так для всех 7-ми строк. Вторая и все последующие строки 10001 и 0x11.

В самой программе для создания символа вы инициализируете массив из 7-ми элементов и можете задавать его как в двоичном формате, так и в шестнадцатеричном формате.

Давайте рассмотрим пример вывода на LCD надписи "ПАЯЛЬНИК":
?
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
  
#include "Wire.h" 
#include "LiquidCrystal_I2C.h"
 
uint8_t bukva_P[8] = {0x1F,0x11,0x11,0x11,0x11,0x11,0x11};
uint8_t bukva_Ya[8] = {
  B01111,
  B10001,
  B10001,
  B01111,
  B00101,
  B01001,
  B10001
};
uint8_t bukva_L[8] = {0x3,0x7,0x5,0x5,0xD,0x9,0x19};
uint8_t bukva_Mz[8] = {0x10,0x10,0x10,0x1E,0x11,0x11,0x1E};
uint8_t bukva_I[8] = {0x11,0x13,0x13,0x15,0x19,0x19,0x11};
 
LiquidCrystal_I2C lcd(0x27,16,2);  // устанавливаем адрес 0x27, и дисплей 16 символов в 2 строки (16х2)
 
void setup()
{
  lcd.init();                      // инициализация LCD 
  lcd.backlight();                 // включаем подсветку
  lcd.clear();                     // очистка дисплея
   
  lcd.createChar(0, bukva_P);      // создаем символ и записываем его в память LCD
  lcd.createChar(1, bukva_Ya);
  lcd.createChar(2, bukva_L);
  lcd.createChar(3, bukva_Mz);
  lcd.createChar(4, bukva_I);
  lcd.home();
  lcd.print(0, BYTE);              // отображаем символ в памяти LCD по 0 адресу
  lcd.print("A");
  lcd.print(1, BYTE);
  lcd.print(2, BYTE);  
  lcd.print(3, BYTE);
  lcd.print("H");
  lcd.print(4, BYTE);
  lcd.print("K");  
}
 
void loop()
{
   
}
